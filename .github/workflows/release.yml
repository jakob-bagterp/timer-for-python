name: release

# Preparation steps and before triggering the workflow by pushing a version tag (e.g. v1.2.3):
# 1. Update the version number in the following files:
#   - /setup.cfg                (update the version in the [metadata] section)
#   - /src/timer/version.py     (update the __version_info__ tuple)
#   - /README.md                (update the version in the badge)
#   - /docs/index.md            (update the version in the badge)
# 2. Commit the changes.
# 3. Add a tag with the version number (e.g. v1.2.3) to the commit.
# 4. Push the commit including the tag to the master branch, which triggers the release workflow.
# 5. Check that the release workflow is completed successfully.
# 6. Check the latest release notes on GitHub: https://github.com/jakob-bagterp/timer-for-python/releases

on:
  push:
    tags: # Naming convention for release tags: v1.2.3 (or v1.2.3a1, v1.2.3b1, v1.2.3rc1)
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: timer-for-python
  OWNER: jakob-bagterp

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | sed 's/^v//' | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build source and wheel distribution
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  test_pypi:
    name: Test PyPI
    needs: [pypi_publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Ensure latest version of pip is installed
        run: |
          python -m pip install --upgrade pip

      - name: Wait for PyPI to update
        run: |
          echo "Waiting for PyPI to update..."
          sleep 120

      - name: Install package from PyPI and verify that it matches the new version
        run: |
          pip install ${{ env.PACKAGE_NAME }}
          INSTALLED_VERSION=$(pip show ${{ env.PACKAGE_NAME }} | grep Version | cut -d ' ' -f 2)
          echo "Installed version: $INSTALLED_VERSION"
          if [ "$INSTALLED_VERSION" != "${{ needs.details.outputs.new_version }}" ]; then
            echo "Installed version does not match the new version."
            exit 1
          fi

  github_release:
    name: Create GitHub release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes

  bump_homebrew_formula:
    name: Dispatch event to Repo B
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    environment:
      name: release
    steps:
      - name: Dispatch repository dispatch event
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.BREW_TAP_TOKEN }}
          repository: ArjanCodes/homebrew-core
          event-type: "update-formula"
          client-payload: |-
            {
              "formula_version": "${{env.FORMULA_VERSION}}",
              "formula_url": "${{ env.FORMULA_URL }}",
              "formula_name": "${{ env.FORMULA_NAME }}"
            }
        env:
          FORMULA_VERSION: ${{ needs.details.outputs.new_version }}
          FORMULA_NAME: ${{ env.PACKAGE_NAME }}
          FORMULA_URL: https://github.com/${{env.OWNER}}/${{env.PACKAGE_NAME}}/releases/download/${{ needs.details.outputs.new_version }}/${{env.PACKAGE_NAME}}-${{ needs.details.outputs.new_version }}.tar.gz

  bump_version:
    needs: [details, github_release, pypi_publish]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Bump version
        run: |
          NEW_VERSION="${{ needs.details.outputs.new_version }}"
          poetry version $NEW_VERSION
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-to-$NEW_VERSION
          git add pyproject.toml
          git commit -m "Bump version to $NEW_VERSION"
          git push origin version-bump-to-$NEW_VERSION

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: version-bump-${{ needs.details.outputs.new_version }}
          title: "Bump version to ${{ needs.details.outputs.new_version }}"
          body: "This PR bumps the version to ${{ needs.details.outputs.new_version }}."
          labels: "version-bump"
