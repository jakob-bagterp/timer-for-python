{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Easy Way to Start, Stop and Measure Time","text":"","tags":["Tutorial"]},{"location":"#timer-for-python","title":"Timer for Python \u23f3","text":"","tags":["Tutorial"]},{"location":"#why-use-a-timer","title":"Why Use a Timer?","text":"<p>Measuring time and performance should be easy. If you want to measure the time it takes to run Python programs and measure the performance of multiple blocks of code, Timer for Python is a lightweight package that does the job.</p>","tags":["Tutorial"]},{"location":"#how-it-works","title":"How It Works","text":"","tags":["Tutorial"]},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Simply wrap the Timer around a block of code that you want to measure:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>After <code>timer.stop()</code>, the elapsed time will be printed in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds\n</code></pre>","tags":["Tutorial"]},{"location":"#context-manager","title":"Context Manager","text":"<p>Alternatively, use the <code>with</code> statement. This will automatically start and stop the clock \u2013 and so no need to declare <code>timer.start()</code> and <code>timer.stop()</code>. Same result as before, but less code:</p> Python<pre><code>from timer import Timer\n\nwith Timer():\n    # Insert your code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds\n</code></pre>","tags":["Tutorial"]},{"location":"#multiple-threads","title":"Multiple Threads","text":"<p>Gain total flexibility to measure the performance of different blocks of code using multiple threads:</p> Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"A\")\n    # Insert your code here\n\n    with Timer(thread=\"B\", decimals=5):\n        # Insert more code here\n\n    # Insert even more code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread B\n% Elapsed time: 6.78 seconds for thread A</code></pre>","tags":["Tutorial"]},{"location":"#function-decorator","title":"Function Decorator","text":"<p>Or use <code>@function_timer()</code> as function decorator to measure the performance of a function:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef test_function():\n    # Insert your code here\n\ntest_function()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds for thread TEST_FUNCTION</code></pre>","tags":["Tutorial"]},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to try? Let's get started.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial"]},{"location":"getting-started/","title":"Get Started in 2 Easy Steps \ud83d\ude80","text":"<p>Ready to try the easy way to measure the time and performance of your Python code? Let's get started:</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#1-install-timer-for-python-package","title":"1. Install Timer for Python Package","text":"<p>Assuming that Python is already installed, execute this command in the terminal to install the Timer package:</p> <pre><code>pip install timer-for-python\n</code></pre> <p>Find more details and options in the installation guide.</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#2-first-script","title":"2. First Script","text":"<p>You're now ready to go:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>After <code>timer.stop()</code>, the elapsed time will be printed in your terminal. Example:</p> <pre><code>% Elapsed time: 12.34 seconds\n</code></pre>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Find more usage examples and tutorials in the user guide section.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/installation/","title":"How to Install","text":"","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> </ul> <p>Assuming that Python is installed already, you can install Timer with either of the following package managers: PyPI or Homebrew.</p>","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#pypi","title":"PyPI","text":"<p>For PyPI, execute this command in the terminal:</p> <pre><code>pip install timer-for-python\n</code></pre> <p>Keep the package up to date with this command:</p> <pre><code>pip install --upgrade timer-for-python\n</code></pre>","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#homebrew","title":"Homebrew","text":"<p>If you already have installed the Homebrew package manager for Mac and Linux, execute this terminal command to tap and install Timer:</p> <pre><code>brew tap jakob-bagterp/timer-for-python\nbrew install timer-for-python\n</code></pre> <p>Use the same commands to keep the package up to date with Homebrew.</p>","tags":["Installation","PyPI","Homebrew"]},{"location":"index/tags/","title":"Tags","text":"<p>List of all tags and relevant pages:</p>"},{"location":"index/tags/#tag:documentation","title":"Documentation","text":"<ul> <li>            @function_timer()          </li> <li>            Documentation          </li> <li>            Timer          </li> <li>            timer.start()          </li> <li>            timer.stop()          </li> </ul>"},{"location":"index/tags/#tag:features","title":"Features","text":"<ul> <li>            Context Manager          </li> <li>            Decimals          </li> <li>            Function Decorator          </li> <li>            Graceful Error Handling          </li> <li>            Humanised Output          </li> <li>            Multiple Threads          </li> <li>            User Guide \ud83d\udc68\u200d\ud83d\udd27          </li> </ul>"},{"location":"index/tags/#tag:homebrew","title":"Homebrew","text":"<ul> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:installation","title":"Installation","text":"<ul> <li>            Get Started with Measuring Time in 2 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:pypi","title":"PyPI","text":"<ul> <li>            Get Started with Measuring Time in 2 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:tutorial","title":"Tutorial","text":"<ul> <li>            @function_timer()          </li> <li>            Context Manager          </li> <li>            Decimals          </li> <li>            Function Decorator          </li> <li>            Get Started with Measuring Time in 2 Easy Steps          </li> <li>            Multiple Threads          </li> <li>            The Easy Way to Start, Stop and Measure Time          </li> <li>            Timer          </li> <li>            User Guide \ud83d\udc68\u200d\ud83d\udd27          </li> <li>            timer.start()          </li> <li>            timer.stop()          </li> </ul>"},{"location":"project/donate/","title":"Donations","text":""},{"location":"project/donate/#open-source-and-community-driven","title":"Open-Source and Community-Driven","text":"<p>This project is a community-driven open-source initiative, developed without commercial interests and shared freely for anyone to use, improve, and build upon. What began as a simple idea has grown beyond expectations, with downloads far surpassing our initial goals:</p> <p></p>"},{"location":"project/donate/#how-to-support","title":"How to Support","text":"<p>Your support \u2013 whether through contributions, feedback, or simply spreading the word \u2013 is vital to help us maintain and continue enhancing the project for everyone.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"project/support-and-contribution/","title":"Support and Contribution","text":"<p>This open-source project welcomes contributions from the community. Your support is vital for maintaining and improving it.</p> <p>Before contributing or reporting issues, please ensure that you ruled out issues that are not related to this project.</p>"},{"location":"project/support-and-contribution/#contribute","title":"Contribute","text":"<p>If you have suggestions or changes to the module, feel free to add to the code and create a pull request.</p>"},{"location":"project/support-and-contribution/#report-bugs","title":"Report Bugs","text":"<p>If you encounter any issues, you can report them as bugs or raise issues.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"reference/","title":"Documentation \ud83d\udcda","text":"<p>Find details about all methods in this section.</p>","tags":["Documentation"]},{"location":"reference/#quick-links","title":"Quick Links","text":"<ul> <li>Timer main class</li> <li>timer.start()</li> <li>timer.stop()</li> <li>@function_timer() function decorator</li> </ul>","tags":["Documentation"]},{"location":"reference/#support-the-project","title":"Support the Project","text":"<p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Documentation"]},{"location":"reference/function-timer/","title":"Function Decorator","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/function-timer/#function_timer","title":"<code>@function_timer()</code>","text":"<p>Function decorator to measure the performance of a function.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to start new thread. By default, the thread name is the function name.</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>Option to define decimals for output. Minimum <code>0</code> (for no decimals) and maximum <code>9</code>. If <code>None</code>, default is <code>2</code> decimals. May be overruled in certain cases due to humanised output.</p> <code>2</code> Example <p>Basic usage:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef test_function():\n    # Insert your code here\n\ntest_function()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds for thread TEST_FUNCTION</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import function_timer\n\n@function_timer(thread=\"custom\", decimals=5)\ndef test_function():\n    # Insert your code here\n\ntest_function()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre> <p>The <code>@function_timer</code> automatically names the function and its arguments as thread name. For example:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef sum_numbers(a, b):\n    return a + b\n\nsum_numbers(1, 2)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12 seconds for thread SUM_NUMBERS(A=1, B=2)</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/start/","title":"Start Timer","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/start/#timerstart","title":"<code>timer.start()</code>","text":"<p>Starts the Timer. Should always be followed by <code>timer.stop()</code> later in the code.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to start new thread.</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>Option to define decimals for output. Minimum <code>0</code> (for no decimals) and maximum <code>9</code>. If <code>None</code>, default is <code>2</code> decimals. May be overruled in certain cases due to humanised output.</p> <code>None</code> Example <p>Basic usage:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>Elapsed time: 12.34 seconds\n</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(thread=\"custom\", decimals=5)\n\n# Insert your code here\n\ntimer.stop(thread=\"custom\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/stop/","title":"Stop Timer","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/stop/#timerstop","title":"<code>timer.stop()</code>","text":"<p>Stops the Timer. Should always be called after <code>timer.start()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to stop specific thread.</p> <code>None</code> Example <p>Basic usage:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>Elapsed time: 12.34 seconds\n</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(thread=\"custom\", decimals=5)\n\n# Insert your code here\n\ntimer.stop(thread=\"custom\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/timer/","title":"Start and Stop Timer","text":"","tags":["Documentation","Tutorial"]},{"location":"reference/timer/#timer.model.timer.Timer","title":"<code>Timer(thread=None, decimals=2)</code>","text":"<p>Main class to create a Timer instance. If not using the class with a <code>with</code> statement as context manager, remember that a <code>timer.start()</code> should always be followed by <code>timer.stop()</code> later in the code.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to start new thread.</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>Option to define decimals for output. Minimum <code>0</code> (for no decimals) and maximum <code>9</code>. If <code>None</code>, default is <code>2</code> decimals. May be overruled in certain cases due to humanised output.</p> <code>2</code> Example <p>Basic usage:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>Or with a <code>with</code> statement as context manager:</p> Python<pre><code>from timer import Timer\n\nwith Timer():\n    # Insert your code here\n</code></pre> <p>In both cases, the terminal output example is the same:</p> <pre><code>Elapsed time: 12.34 seconds\n</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer(thread=\"custom\", decimals=5)\ntimer.start()\n\n# Insert your code here\n\ntimer.stop(thread=\"custom\")\n</code></pre> <p>Or with a <code>with</code> statement as context manager:</p> Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"custom\", decimals=5):\n    # Insert your code here\n</code></pre> <p>As before, the terminal will output the same result in both cases:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/timer/#timer.model.timer.Timer.start","title":"<code>start(thread=None, decimals=None)</code>","text":"<p>Starts the Timer. Should always be followed by <code>timer.stop()</code> later in the code.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to start new thread.</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>Option to define decimals for output. Minimum <code>0</code> (for no decimals) and maximum <code>9</code>. If <code>None</code>, default is <code>2</code> decimals. May be overruled in certain cases due to humanised output.</p> <code>None</code> Example <p>Basic usage:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>Elapsed time: 12.34 seconds\n</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(thread=\"custom\", decimals=5)\n\n# Insert your code here\n\ntimer.stop(thread=\"custom\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Documentation","Tutorial"]},{"location":"reference/timer/#timer.model.timer.Timer.stop","title":"<code>stop(thread=None)</code>","text":"<p>Stops the Timer. Should always be called after <code>timer.start()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>str | None</code> <p>Option to stop specific thread.</p> <code>None</code> Example <p>Basic usage:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>Elapsed time: 12.34 seconds\n</code></pre> <p>With custom thread name and decimals:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(thread=\"custom\", decimals=5)\n\n# Insert your code here\n\ntimer.stop(thread=\"custom\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Documentation","Tutorial"]},{"location":"user-guide/","title":"User Guide \ud83d\udc68\u200d\ud83d\udd27","text":"<p>Timer for Python is a lightweight package and intended to be easy to use. A simple tool for measuring performance of Python programs or blocks of code.</p> <p>Find tutorials and learn how get the most out of the Timer in this section.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/#basic-usage-and-how-to-wrap-your-code","title":"Basic Usage and How to Wrap Your Code","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/#manual-start-and-stop","title":"Manual Start and Stop","text":"<p>After importing the Timer on top of your Python script, simply wrap the Timer function around your code to measure performance of the executed block of code:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>After <code>timer.stop()</code>, the elapsed time will be printed in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/#automatic-start-and-stop","title":"Automatic Start and Stop","text":"<p>Alternatively, use the <code>with</code> statement for context management. This will automatically start and stop the clock \u2013 and so no need to declare <code>timer.start()</code> and <code>timer.stop()</code>. Same result as before, but less code:</p> Python<pre><code>from timer import Timer\n\nwith Timer():\n    # Insert your code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/#decimals","title":"Decimals","text":"<p>Set decimals to customise the precision of the terminal output:</p> Python<pre><code>from timer import Timer\n\nwith Timer(decimals=5):\n    # Insert your code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/#multiple-threads","title":"Multiple Threads","text":"<p>There's total flexibility to measure the performance of different blocks of code using multiple threads:</p> Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"A\")\n    # Insert your code here\n\n    with Timer(thread=\"B\", decimals=5):\n        # Insert more code here\n\n    # Insert even more code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread B\n% Elapsed time: 6.78 seconds for thread A</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/#quick-links","title":"Quick Links","text":"<ul> <li>Multiple threads to measure the performance of different blocks of code</li> <li>Decimals to set the precision of the terminal output</li> <li>Context manager to automatically start and stop the clock</li> <li>Function decorator to measure the performance of functions</li> <li>Humanised output to display time measurements in human-readable format</li> <li>Graceful error handling to gracefully handle exceptions and non-blocking code</li> </ul>","tags":["Features","Tutorial"]},{"location":"user-guide/#support-the-project","title":"Support the Project","text":"<p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/","title":"How to Automatically Start and Stop the Timer","text":"<p>Instead of manually starting and stopping the Timer with <code>timer.start()</code> and <code>timer.stop()</code>, it's recommend to use the context manager and <code>with Timer():</code> statements.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#advantages","title":"Advantages","text":"<p>Apart from less code and more readable code, the built-in context manager automatically closes the Timer (so you don't forget it) when the task is done or if an error occurs.</p> <p>As an added benefit, the <code>with</code> statement prevents you from having loose ends lingering in the Python runtime.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#examples","title":"Examples","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#with-context-manager","title":"With Context Manager","text":"<p>It's recommended to do this:</p> Python<pre><code>from timer import Timer\n\nwith Timer():\n    # Insert your code here\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#without-context-manager","title":"Without Context Manager","text":"<p>And not recommended to do this:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#multiple-threads-and-decimals","title":"Multiple Threads and Decimals","text":"<p>It's possible nest multiple instances of context. Simply remember to add a unique <code>thread</code> parameter to each instance of <code>Timer()</code>.</p> Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"A\")\n    # Insert your code here\n\n    with Timer(thread=\"B\", decimals=5):\n        # Insert more code here\n\n    with Timer(thread=\"C\", decimals=3):\n        # Insert even more code here\n\n    # Insert even more code here for thread A\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread B\n% Elapsed time: 0.123 seconds for thread C\n% Elapsed time: 1.23 seconds for thread A</code></pre> <p>Learn more about decimals and threads.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/context-manager/#flow-diagram","title":"Flow Diagram","text":"<p>How the Timer starts and stops different threads:</p> <pre><code>with Timer(thread=\"A\"): &gt;----------------------|\n    # Insert your code here                    |\n                                               |\n    with Timer(thread=\"B\", decimals=5): &gt;--|   |\n        # Insert more code here            |   |\n        |&lt;---------------------------------|   |\n                                               |\n    with Timer(thread=\"C\", decimals=3): &gt;--|   |\n        # Insert even more code here       |   |\n        |&lt;---------------------------------|   |\n                                               |\n    # Insert even more code here for thread A  |                                               |\n    |&lt;-----------------------------------------|\n</code></pre> <p>Singleton and Unique Threads</p> <p>The <code>Timer()</code> class is a singleton, which means that there can only be one instance of the class. This is to ensure that the same <code>Timer()</code> is used for all threads and that each thread is unique.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/","title":"How to Use Decimals for Precision","text":"<p>To set the number of decimals in the output, use the <code>decimals</code> parameter. Instead of the default value <code>2</code> for <code>decimals</code>, you can set the output precision up to <code>9</code> in the <code>decimals</code> parameter:</p> Python<pre><code>from timer import Timer\n\nwith Timer(decimals=5):\n    # Insert your code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/#configuration-options","title":"Configuration Options","text":"<p>Default value for <code>decimals</code> is <code>2</code>. The range is minimum <code>0</code> for no decimals and up to <code>9</code>:</p> Decimals Example Output <code>0</code> 12 seconds <code>1</code> 12.3 seconds <code>2</code> (default) 12.34 seconds <code>3</code> 12.345 seconds ... ... <code>9</code> 12.345678901 seconds <p>Humanised Output</p> <p>When you measure time in microseconds, decimal precision may be important. But if a program runs for a minute or more, it doesn't make sense to display the output time in milliseconds. Therefore, the decimal configuration will be overridden in certain cases by humanised output.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/#basic-usage","title":"Basic Usage","text":"<p>To set the number of decimals in the output (only if less than an hour), use the <code>decimals</code> parameter. Instead of the default value <code>2</code> for <code>decimals</code>, you can set the output precision up to <code>9</code> in the <code>decimals</code> parameter.</p> <p>Both with or without the <code>with</code> statement for context management:</p> Context ManagerWithout Context Manager Python<pre><code>from timer import Timer\n\nwith Timer(decimals=5):\n    # Insert your code here\n</code></pre> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(decimals=5)\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>In both cases, how it appears in the terminal is the same:</p> <pre><code>% Elapsed time: 0.12345 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/#different-decimals-for-different-threads","title":"Different Decimals for Different Threads","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/#general-configuration","title":"General Configuration","text":"<p>It's also possible to set the decimals when initiating the Timer. This will last throughout the session (unless overridden by a specific thread):</p> Python<pre><code>from timer import Timer\n\ntimer = Timer(decimals=6)\ntimer.start()\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.123456 seconds\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/decimals/#how-to-bypass-general-configuration-and-set-decimals-by-thread","title":"How to Bypass General Configuration and Set Decimals by Thread","text":"<p>Or set the decimals when starting a new thread, which will also override the general decimals defined when initiating the Timer.</p> Python<pre><code>from timer import Timer\n\ntimer = Timer(decimals=5)\ntimer.start(decimals=9)\n\n# Insert your code here\n\ntimer.stop()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.123456789 seconds\n</code></pre> <p>This works both with or without the <code>with</code> statement for context management:</p> Context ManagerWithout Context Manager Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"A\", decimals=5):\n    # Insert your code here\n\n    with Timer(thread=\"B\", decimals=2):\n        # Insert more code here\n</code></pre> Python<pre><code>from timer import Timer\n\ntimer = Timer(decimals=5)\ntimer.start(thread=\"A\")\n\n# Insert your code here\n\ntimer.start(thread=\"B\", decimals=2)\n\n# Insert more code here\n\ntimer.stop(thread=\"B\")\n\ntimer.stop(thread=\"A\")\n</code></pre> <p>In both cases, how it appears in the terminal is the same:</p> <pre><code>% Elapsed time: 0.12 seconds for thread B\n% Elapsed time: 0.12345 seconds for thread A</code></pre> <p>Precision in Nanoseconds</p> <p>Timer for Python uses the native <code>time.perf_counter_ns()</code> function for maximum resolution in nanoseconds.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/function-decorator/","title":"How to Measure Time of Functions","text":"<p>When you want to measure the performance of a function, use the function decorator.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/function-decorator/#what-is-a-decorated-function","title":"What Is a Decorated Function?","text":"<p>The <code>@</code> preceding a function is called a decorator. Such decoractor wraps a function and gives extra functionality without changing the original function.</p> <p>The pattern is:</p> <pre><code>@decorator\ndef function():\n    # Function code\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/function-decorator/#examples","title":"Examples","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/function-decorator/#basic-usage","title":"Basic Usage","text":"<p>Use the <code>@function_timer()</code> as decorator to measure the performance of a function. Then the Timer will be triggered each time the function is called, and the clock will stop automatically when the function is finished:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef test_function():\n    # Insert your code here\n\ntest_function()\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 12.34 seconds for thread TEST_FUNCTION</code></pre> <p>How to Get Function and Arguments as Thread Name</p> <p>If you want to keep track of a function and its arguments for troubleshooting and measuring the performance of a function, it's already handled by the <code>@function_timer()</code> decorator. For example:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef sum_numbers(a, b):\n    return a + b\n\nsum_numbers(1, 2)\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% Elapsed time: 0.12 seconds for thread SUM_NUMBERS(A=1, B=2)</code></pre></p> <p>This also works with keyword arguments:</p> Python<pre><code>from timer import function_timer\n\n@function_timer()\ndef anonymous_last_name(first_name, last_name = \"unknown\"):\n    return f\"{first_name} {last_name}\"\n\nanonymous_last_name(\"John\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% Elapsed time: 0.12 seconds for thread ANONYMOUS_LAST_NAME(FIRST_NAME='JOHN', LAST_NAME='UNKNOWN')</code></pre></p>","tags":["Features","Tutorial"]},{"location":"user-guide/function-decorator/#custom-thread-name-and-decimals","title":"Custom Thread Name and Decimals","text":"<p>Similar to customising decimals and thread name for the Timer, this is also possible with the <code>@function_timer()</code> decorator. Simply use the <code>thread</code> and <code>decimals</code> arguments where the custom thread will override the default function name and list of arguments:</p> Python<pre><code>from timer import function_timer\n\n@function_timer(thread=\"custom\", decimals=5)\ndef sum_numbers(a, b):\n    return a + b\n\nsum_numbers(1, 2)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread CUSTOM</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/graceful-error-handling/","title":"Graceful Error Handling and Non-Blocking Code","text":"<p>No Interruptions</p> <p>Timer for Python won't break your code!</p> <p>Timer for Python is designed with several nested <code>try</code>/<code>catch</code> clauses so it gracefully handles exceptions and therefore shouldn't break your application while running.</p>","tags":["Features"]},{"location":"user-guide/humanised-output/","title":"What Is Humanised Time?","text":"<p>Timer for Python supports measurement of time from nanoseconds to days.</p> <p>But. If a program runs for a minute, it doesn't make sense to display the output time in 60,000 milliseconds. And similarly if it runs an hour, it doesn't make sense to display the output time in 3,600 seconds.</p> <p>Therefore, the output of Timer is automatically humanised so it's easier to read.</p> <p>How It Impacts the Decimals Configuration</p> <p>While you can measure time from nanoseconds to seconds with up to 9 decimals of a floating point number by using <code>Timer(decimals=9)</code>, it doesn't always make sense. That's why the decimal configuration is overridden by humanised output in certain cases.</p>","tags":["Features"]},{"location":"user-guide/humanised-output/#examples-and-ranges","title":"Examples and Ranges","text":"<p>How different time ranges may appear in the terminal from fractions of a second to minutes, hours, days:</p> Range Decimals Terminal Output Nanoseconds No decimals <code>Elapsed time: 123 nanoseconds</code> From microseconds to minutes Up to 9 decimals <code>Elapsed time: 4.56 microseconds</code><code>Elapsed time: 56.78 milliseconds</code><code>Elapsed time: 7.89 seconds</code><code>Elapsed time: 67.89 seconds (1m 8s)</code> From hours to days No decimals <code>Elapsed time: 2h 3m 4s</code><code>Elapsed time: 1d 2h 3m 4s</code>","tags":["Features"]},{"location":"user-guide/multiple-threads/","title":"Why Use Multiple Threads?","text":"<p>Imagine that you want to troubleshoot which parts of your code are performing better or worse. Or do you want to split-test the performance of different methods? Then you need flexibility, and Timer for Python is a quick, easy way to get the job done.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/multiple-threads/#examples","title":"Examples","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/multiple-threads/#with-context-manager","title":"With Context Manager","text":"<p>To measure the performance of multiple blocks of code, use the <code>thread</code> parameter to name different threads:</p> Python<pre><code>from timer import Timer\n\nwith Timer(thread=\"A\")\n    # Insert your code here\n\n    with Timer(thread=\"B\", decimals=5):\n        # Insert more code here\n\n    # Insert even more code here\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread B\n% Elapsed time: 6.78 seconds for thread A</code></pre> <p>Singleton and Unique Threads</p> <p>The <code>Timer()</code> class is a singleton, which means that there can only be one instance of the class. This is to ensure that the same <code>Timer()</code> is used for all threads and that each thread is unique.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/multiple-threads/#without-context-manager","title":"Without Context Manager","text":"<p>If you don't want to use the context manager <code>with</code> statement, you can get the same result with a little more code:</p> Python<pre><code>from timer import Timer\n\ntimer = Timer()\ntimer.start(thread=\"A\")\n\n# Insert your code here\n\ntimer.start(thread=\"B\", decimals=5)\n\n# Insert more code here\n\ntimer.stop(thread=\"B\")\n\n# Insert even more code here\n\ntimer.stop(thread=\"A\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Elapsed time: 0.12345 seconds for thread B\n% Elapsed time: 6.78 seconds for thread A</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/multiple-threads/#flow-diagram","title":"Flow Diagram","text":"<p>How the Timer starts and stops different threads:</p> <pre><code>timer.start(thread=\"A\") &gt;------------------|\n# Insert your code here                    |\n                                           |\ntimer.start(thread=\"B\", decimals=5) &gt;--|   |\n# Insert more code here                |   |\n                                       |   |\ntimer.stop(thread=\"B\") &lt;---------------|   |\n                                           |\n# Insert even more code here               |\n                                           |\ntimer.stop(thread=\"A\") &lt;-------------------|\n</code></pre>","tags":["Features","Tutorial"]}]}